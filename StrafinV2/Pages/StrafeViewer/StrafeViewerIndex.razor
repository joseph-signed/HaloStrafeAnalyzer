@page "/"

@using SharpDX.XInput
@using StrafinV2.Data

@inject IJSRuntime JS

<h3>Strafe Viewer</h3>

<button class="@recordButton" disabled="@recording" @onclick=StartRecording>Record</button>
<button class="stop" disabled="@notRecording" @onclick=StopRecording>Stop</button>

<div style="border:1px solid black; display: inline-block;">
    <BECanvas Width="@canvasSize" Height="@canvasSize" @ref="_leftCanvasReference"></BECanvas>
</div>
<div style="border:1px solid black; display: inline-block;">
    <BECanvas Width="@canvasSize" Height="canvasSize" @ref="_rightCanvasReference"></BECanvas>
</div>

<video id="left" autoplay download></video>

<video id="right" autoplay download></video>

@code
{
    private Canvas2DContext leftCanvas, rightCanvas;
    protected BECanvasComponent _leftCanvasReference, _rightCanvasReference;

    Timer timer;

    int canvasSize = 200;
    int lineRefreshRate = 40;

    double oldLeftX = 100;
    double oldLeftY = 100;
    double newLeftX = 0;
    double newLeftY = 0;

    double oldRightX = 100;
    double oldRightY = 100;
    double newRightX = 0;
    double newRightY = 0;

    int leftLineLength = 0;
    int rightLineLength = 0;

    string recordButton = "record";
    bool recording = false;
    bool notRecording = true;

    private async Task StartRecording()
    {
        recordButton = "recording";
        recording = true;
        notRecording = false;
        await JS.InvokeVoidAsync("startRecording");
    }

    private async Task StopRecording()
    {
        recordButton = "record";
        recording = false;
        notRecording = true;
        await JS.InvokeVoidAsync("stopRecording");
    }

    protected override async Task OnInitializedAsync()
    {
        StartJoyStickUpdating();
    }

    private void StartJoyStickUpdating()
    {
        timer = new Timer(UpdateJoySticksCallBack, null, 10, 30);
    }

    private async void UpdateJoySticksCallBack(object state)
    {
        await Task.Run(() => XInputController.Update());
        await Task.CompletedTask;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var leftCanvas = this.leftCanvas = await this._leftCanvasReference.CreateCanvas2DAsync();
        var rightCanvas = this.rightCanvas = await this._rightCanvasReference.CreateCanvas2DAsync();

        await leftCanvas.BeginPathAsync();
        await leftCanvas.SetStrokeStyleAsync("blue");

        await rightCanvas.BeginPathAsync();
        await rightCanvas.SetStrokeStyleAsync("blue");


        newLeftX = XInputController.left_x + 100;
        newLeftY = XInputController.left_y + 100;

        await leftCanvas.MoveToAsync(oldLeftX, oldLeftY);
        await leftCanvas.LineToAsync(newLeftX, newLeftY);
        await leftCanvas.StrokeAsync();

        oldLeftX = newLeftX;
        oldLeftY = newLeftY;

        newRightX = XInputController.right_x + 100;
        newRightY = XInputController.right_y + 100;

        await rightCanvas.MoveToAsync(oldRightX, oldRightY);
        await rightCanvas.LineToAsync(newRightX, newRightY);
        await rightCanvas.StrokeAsync();

        oldRightX = newRightX;
        oldRightY = newRightY;

        //Clear screen
        leftLineLength = leftLineLength + 1;
        if (leftLineLength > lineRefreshRate)
        {
            await leftCanvas.ClearRectAsync(0, 0, canvasSize, canvasSize);
            await leftCanvas.SetFillStyleAsync("white");
            await leftCanvas.FillRectAsync(0, 0, canvasSize, canvasSize);
            leftLineLength = 0;
        }

        rightLineLength = rightLineLength + 1;
        if (rightLineLength > lineRefreshRate)
        {
            await rightCanvas.ClearRectAsync(0, 0, canvasSize, canvasSize);
            await rightCanvas.SetFillStyleAsync("white");
            await rightCanvas.FillRectAsync(0, 0, canvasSize, canvasSize);
            rightLineLength = 0;
        }
    }
}


