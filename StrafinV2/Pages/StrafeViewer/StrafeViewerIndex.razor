@page "/"

@using SharpDX.XInput
@using StrafinV2.Data

@inject IJSRuntime jsRuntimeService


<h3>Strafe Viewer</h3>

<p role="status">Current left joystick X position: @XInputController.left_x</p>

<p role="status">Current left joystick Y position: @XInputController.left_y</p>

<p role="status">Current right joystick X position: @XInputController.right_x</p>

<p role="status">Current right joystick Y position: @XInputController.right_y</p>
<button id="btn"></button>
<button class="btn btn-primary" @onclick="StartJoyStickUpdating">Start Viewer</button>
<br />
<br />

<div style="border:1px solid black; display: inline-block;">
    <canvas id="record">
        <BECanvas Width="200" Height="200" @ref="_leftCanvasReference"></BECanvas>
    </canvas>
</div>
<div style="border:1px solid black; display: inline-block;">
    <BECanvas Width="200" Height="200" @ref="_rightCanvasReference"></BECanvas>
</div>
<video autoplay controls></video>

@code
{
    private Canvas2DContext leftCanvas;
    protected BECanvasComponent _leftCanvasReference;

    private Canvas2DContext rightCanvas;
    protected BECanvasComponent _rightCanvasReference;

    Timer timer;

    double oldLeftX = 100;
    double oldLeftY = 100;
    double newLeftX;
    double newLeftY;

    double oldRightX = 100;
    double oldRightY = 100;
    double newRightX;
    double newRightY;

    int leftLineLength = 0;
    int rightLineLength = 0;

    private void StartJoyStickUpdating()
    {
        timer = new Timer(UpdateJoySticksCallBack, null, 10, 30);
    }

    private async void UpdateJoySticksCallBack(object state)
    {
        await Task.Run(() => XInputController.Update());
        await Task.CompletedTask;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var leftCanvas = this.leftCanvas = await this._leftCanvasReference.CreateCanvas2DAsync();
        var rightCanvas = this.rightCanvas = await this._rightCanvasReference.CreateCanvas2DAsync();

        await leftCanvas.BeginPathAsync();
        await leftCanvas.SetStrokeStyleAsync("blue");

        await rightCanvas.BeginPathAsync();
        await rightCanvas.SetStrokeStyleAsync("blue");


        newLeftX = XInputController.left_x + 100;
        newLeftY = XInputController.left_y + 100;

        await leftCanvas.MoveToAsync(oldLeftX, oldLeftY);
        await leftCanvas.LineToAsync(newLeftX, newLeftY);
        await leftCanvas.StrokeAsync();

        oldLeftX = newLeftX;
        oldLeftY = newLeftY;

        newRightX = XInputController.right_x + 100;
        newRightY = XInputController.right_y + 100;

        await rightCanvas.MoveToAsync(oldRightX, oldRightY);
        await rightCanvas.LineToAsync(newRightX, newRightY);
        await rightCanvas.StrokeAsync();

        oldRightX = newRightX;
        oldRightY = newRightY;

        //Clear screen
        leftLineLength = leftLineLength + 1;
        if (leftLineLength > 40)
        {
            await leftCanvas.ClearRectAsync(0, 0, 200, 200);
            leftLineLength = 0;
        }

        rightLineLength = rightLineLength + 1;
        if (rightLineLength > 40)
        {
            await rightCanvas.ClearRectAsync(0, 0, 200, 200);
            rightLineLength = 0;
        }
    }
}


