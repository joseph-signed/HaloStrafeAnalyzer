@page "/"

@using SharpDX.XInput
@using StrafinV2.Data




<h3>Strafe Viewer</h3>

<p role="status">Current left joystick X position: @XInputController.left_x</p>

<p role="status">Current left joystick Y position: @XInputController.left_y</p>

<p role="status">Current right joystick X position: @XInputController.right_x</p>

<p role="status">Current right joystick Y position: @XInputController.right_y</p>

<button class="btn btn-primary" @onclick="StartJoyStickUpdating">Start Viewer</button>
<br />
<br />
<div style="border:1px solid black; display: inline-block;">
    <BECanvas Width="200" Height="200" @ref="_canvasReference"></BECanvas>
</div>

@code
{
    private Canvas2DContext canvas;
    protected BECanvasComponent _canvasReference;
    Timer timer;

    double oldX = 100;
    double oldY = 100;
    double newX;
    double newY;

    int lineLength = 0;

    private void StartJoyStickUpdating()
    {
        timer = new Timer(UpdateJoySticksCallBack, null, 10, 30);
    }

    private async void UpdateJoySticksCallBack(object state)
    {
        await Task.Run(() => XInputController.Update());
        await Task.CompletedTask;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var canvas = this.canvas = await this._canvasReference.CreateCanvas2DAsync();

        await canvas.BeginPathAsync();
        await canvas.SetStrokeStyleAsync("blue");


        newX = XInputController.left_x + 100;
        newY = XInputController.left_y + 100;

        await canvas.MoveToAsync(oldX, oldY);
        await canvas.LineToAsync(newX, newY);
        await canvas.StrokeAsync();

        oldX = newX;
        oldY = newY;

        //Clear screen
        lineLength = lineLength + 1;
        if(lineLength>40) 
        { 
            await canvas.ClearRectAsync(0, 0, 200, 200); 
            lineLength = 0;
            canvas.Dispose();
        }
    }
}


